{{- $kubernetes := $.Values.kubernetes -}}
# Source: https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/dns/coredns/coredns.yaml.base
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: coredns
  namespace: kube-system
  labels:
      kubernetes.io/cluster-service: "true"
      addonmanager.kubernetes.io/mode: Reconcile
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    addonmanager.kubernetes.io/mode: Reconcile
  name: system:coredns
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  - services
  - pods
  - namespaces
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
    addonmanager.kubernetes.io/mode: EnsureExists
  name: system:coredns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:coredns
subjects:
- kind: ServiceAccount
  name: coredns
  namespace: kube-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
data:
  Corefile: |
    .:53 {
        errors
        health {
            lameduck 5s
        }
        ready
        kubernetes {{ $kubernetes.networking.dnsDomain }} in-addr.arpa ip6.arpa {
            pods insecure
            fallthrough in-addr.arpa ip6.arpa
            ttl 30
        }
        prometheus :9153
        forward . /etc/resolv.conf {
            max_concurrent 1000
        }
        cache 30
        loop
        reload
        loadbalance
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "CoreDNS"
  {{- if $kubernetes.coredns.labels }}
    {{- toYaml $kubernetes.coredns.labels | nindent 4  }}
  {{- end }}
  {{- with $kubernetes.coredns.annotations }}
  annotations:
    {{- toYaml . | nindent 4}}
  {{- end }}
spec:
  replicas: {{ $kubernetes.coredns.replicaCount }}
  {{- with $kubernetes.coredns.strategy }}
  strategy: {{ toYaml . | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      k8s-app: kube-dns
  template:
    metadata:
      labels:
        k8s-app: kube-dns
      {{- if $kubernetes.coredns.labels }}
        {{- toYaml $kubernetes.coredns.podLabels | nindent 8 }}
      {{- end }}
      {{- with $kubernetes.coredns.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- if $kubernetes.coredns.podSecurityContext.enabled }}
      securityContext:
        {{- toYaml (omit $kubernetes.coredns.podSecurityContext "enabled") | nindent 8 }}
      {{- end }}
      {{- with $kubernetes.coredns.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      priorityClassName: {{ $kubernetes.coredns.priorityClassName }}
      serviceAccountName: coredns
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: k8s-app
                    operator: In
                    values: ["kube-dns"]
              topologyKey: kubernetes.io/hostname
      {{- with $kubernetes.coredns.tolerations }}        
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $kubernetes.coredns.nodeSelector }}        
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      imagePullSecrets:
        {{- with $kubernetes.coredns.imagePullSecrets }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      containers:
      - name: coredns
        {{- with $kubernetes.coredns.image }}
        image: {{ include "pkg.images.registry.convert" (dict "image" . "ctx" $) }}
        imagePullPolicy: {{ .pullPolicy }}
        {{- end }}
        resources:
          {{- toYaml $kubernetes.coredns.resources | nindent 10 }}
        args: [ "-conf", "/etc/coredns/Corefile" ]
        env:
        {{- if $kubernetes.coredns.injectProxy }}
          {{- include "pkg.common.env.w-proxy" $ | nindent 8 }}
        {{- else }}
          {{- include "pkg.common.env" $ | nindent 8 }}
        {{- end }}
        {{- with $kubernetes.coredns.envs }}
          {{- include "pkg.utils.envs" (dict "envs" . "ctx" $) | nindent 8 }}
        {{- end }}
        {{- with $kubernetes.coredns.envsFrom }}
        envFrom:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        volumeMounts:
        - name: config-volume
          mountPath: /etc/coredns
          readOnly: true
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        - containerPort: 9153
          name: metrics
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /ready
            port: 8181
            scheme: HTTP
        {{- if $kubernetes.coredns.securityContext.enabled }}
        securityContext:
          {{- toYaml (omit $kubernetes.coredns.securityContext "enabled") | nindent 10 }}
        {{- end }}
      dnsPolicy: Default
      volumes:
        - name: config-volume
          configMap:
            name: coredns
            items:
            - key: Corefile
              path: Corefile
---
apiVersion: v1
kind: Service
metadata:
  name: kube-dns
  namespace: kube-system
  annotations:
    prometheus.io/port: "9153"
    prometheus.io/scrape: "true"
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "CoreDNS"
spec:
  selector:
    k8s-app: kube-dns
  clusterIP: {{ template "kubernetes.getCoreDNS" . }}
  ports:
  - name: dns
    port: 53
    protocol: UDP
  - name: dns-tcp
    port: 53
    protocol: TCP
  - name: metrics
    port: 9153
    protocol: TCP
